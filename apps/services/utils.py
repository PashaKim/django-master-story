import random


def random_from_dict(choices_dict):
    choice = random.choice(list(choices_dict))
    return {'title': choice, 'description': choices_dict[choice]}


class Pantheon:
    GOD_LIST = [
        {'name': 'Авандра',
         'description': 'богиня случая и удачи',
         'alignment': 'ХД',
         'domain': 'Обман',
         'symbol': 'Три сложенные волнистые линии'},
        {'name': 'Королева Воронов',
         'description': 'богиня смерти',
         'alignment': 'ЗН',
         'domain': ['Жизнь', 'Смерть'],
         'symbol': 'Голова ворона в профиль, повёрнута влево'}
    ]

    def gods_set(self, ):
        return random.sample(self.GOD_LIST, random.randrange(1, len(self.GOD_LIST) + 1, 1))


class World:
    place_type = {'поселение': 1, 'лес': 2, 'руины': 3, 'пещера': 4, }
    name_part_dict = {'starting': ['Ки', 'Ха', 'Те', 'Че', 'Ро', 'Жи', 'Д', 'Ме'],
                      'middle': ['', 'р', 'рьк', 'рноп', 'ркасс', 'рниг', 'вн', 'том'],
                      'ending': ['', 'ев', 'ов', 'оль', 'ы', 'о', 'ир', 'од'], }

    assumptions_dict = {'Боги наблюдают за миром.': '''Боги реальны, и олицетворены в различных верованиях, где каждый бог 
                   претендует на власть над определённым аспектом мира, таким как война, леса или реки. Боги оказывают 
                   влияние на мир, даруя божественную магии своим последователям и посылая сигналы и предзнаменования, 
                   направляющие их. Последователь бога служит как его агент в мире. Агент следует идеалам своего бога и
                    уничтожает его соперников. Некоторые могут отказаться от поклонения богам, но никто не может отрицать
                     их существования.''',
                        'Большая часть мира — дикая местность.': '''Дикая местность повсюду. Города, конфедерации и королевства
                    различных размеров усеивают мир, но вокруг их границ нетронутые пространства. Люди хорошо знают то 
                    место, в котором они живут. Они слышали истории о других местах от торговцев и путешественников, но 
                    никто не знает, что находится за горами или в глуши великого леса до тех пор, пока не побывали там.''',
                        'Это древний мир.': '''Империи появляются и исчезают, и мест, нетронутых их величием или разрухой, 
                         остаётся всё меньше и меньше. Война, время и естественные причины влияют на мир смертных, оставляя его
                          наполненным местами приключений и загадок. Древние цивилизации и их знания сохранились в легендах,
                           магических предметах и в развалинах. Хаос и зло часто сопровождает закат империи.'''}
    location_dict = {
        'Деревня': {
            'Тип': place_type['поселение'],
            'Враждебно': False,
            'Население:': 1000,
            'Правительство:': '''Титулованная персона (как правило, не проживающая в поселении) правит деревней, с 
                    назначенным агентом (надсмотрщиком, проживающим в деревне) для разрешения споров и сбора налогов.''',
            'Оборона:': ''' При надсмотрщике может быть небольшой отряд солдат. В противном случае деревня 
                    полагается на гражданское ополчение.''',
            'Торговля:': '''Основные товары доступны в гостиницах и торговых постах. Другие товары поступают от
                     странствующих торговцев.''',
            'Организации:': '''Деревня может содержать один или два храма или святыни, но других организаций мало или нет 
                    совсем.'''
        },
        'Город': {
            'Тип': place_type['поселение'],
            'Враждебно': False,
            'Население:': 6000,
            'Правительство:': '''Местная знать управляет городом и назначает бургомистра, чтобы надзирать за 
                             администрацией. Избранный городской совет представляет интересы среднего класса.''',
            'Оборона:': ''' Знать командует армией профессиональных солдат, а также личными телохранителями.''',
            'Торговля:': '''Основные товары легкодоступны, а экзотические товары и услуги найти труднее. Путников 
                        обслуживают постоялые дворы и таверны.''',
            'Организации:': '''Город содержит несколько храмов, а также различные торговые гильдии и другие 
                            организации.'''
        },
        'Темный Лес': {'Враждебно': True, 'Тип': place_type['лес']},
        'Забытые Руины': {'Враждебно': True, 'Тип': place_type['руины']},
        'Опасная Пещера': {'Враждебно': True, 'Тип': place_type['пещера']},
        'Лес': {'Враждебно': False, 'Тип': place_type['лес'], },
        'Руины': {'Враждебно': False, 'Тип': place_type['руины']},
        'Пещера': {'Враждебно': False, 'Тип': place_type['пещера']}
    }
    directions_list = ['север', 'северо-запад', 'запад', 'юго-запад', 'юг', 'юго-восток', 'восток', 'северо-восток']
    distance_max = 26
    distance_min = 2

    def assumptions(self):
        return random_from_dict(self.assumptions_dict)

    def name(self, place_type):
        name_dict = {self.place_type['поселение']: '{}{}{}'.format(random.choice(self.name_part_dict['starting']),
                                                                   random.choice(self.name_part_dict['middle']),
                                                                   random.choice(self.name_part_dict['ending'])),
                     self.place_type['лес']: '{}{}овский'.format(random.choice(self.name_part_dict['starting']),
                                                                 random.choice(self.name_part_dict['middle']), ),
                     self.place_type['руины']: '{}-{}'.format(random.choice(self.name_part_dict['starting']),
                                                              random.choice(self.name_part_dict['starting']), ),
                     self.place_type['пещера']: '{}тэба'.format(random.choice(self.name_part_dict['starting']), )
                     }
        return name_dict[place_type]

    def settlement(self):
        settlement_dict = {}
        for key, value in self.location_dict.items():
            if value['Тип'] is self.place_type['поселение']:
                settlement_dict[key] = self.location_dict[key]
        random_settlement_dict = random_from_dict(settlement_dict)
        random_settlement_dict['name'] = self.name(place_type=random_settlement_dict['description']['Тип'])
        return random_settlement_dict

    def place_of_adventure(self):
        random_place_dict = random_from_dict(self.location_dict)
        random_place_dict['name'] = self.name(place_type=random_place_dict['description']['Тип'])
        return random_place_dict

    def vicinity_list(self):
        return [{'direction': random.choice(self.directions_list), 'place': self.place_of_adventure(),
                 'distance': random.randint(self.distance_min, self.distance_max)} for d in range(random.randint(3, 6))]


class Company:
    themes_list = [
        'Кампания о борьбе со смертностью, которая может быть реализована с помощью чудовищ нежити или может выражаться через смерть близких.',
        'Кампания закручена вокруг коварного зла. Это могут быть тёмные боги, чудовищные расы, такие как юан-ти или существа из неизвестных, далёких от земных забот, миров. Во время битвы со злом героям придётся столкнуться с порочной природой их собственного вида.',
        'Кампания с участием проблемного героя (-ев), которому приходится столкнуться не просто с дикостью зверских созданий, а с собственным внутренним яростным зверем, живущим глубоко в сердце.',
        'Кампания, исследующая тему ненасытной жажды власти и господства, которая может быть реализована с участием хозяев Девяти Преисподних, или с помощью правителей гуманоидов, стремящихся завоевать мир.']
    genres_list = ['Героическое фэнтези', 'Интрига', 'Детектив', 'Безрассудство', 'Меч и магия', 'Эпичное фэнтези',
                   'Мифическое фэнтези', 'Тёмное фэнтези', 'Война']

    def theme(self):
        return random.choice(self.themes_list)

    def genre(self):
        return random.choice(self.genres_list)


class Event:
    worldwide_shocking_event_dict = ['Восхождение лидера или начало эпохи', 'Падение лидера или конец эпохи',
                                     'Катастрофа', 'Нападение или вторжение', 'Восстание, революция, свержение',
                                     'Вымирание или истощение', 'Новая организация', 'Открытие, экспансия, изобретение',
                                     'Предсказание, предзнаменование, пророчество', 'Мифы и легенды']

    def worldwide_shocking_event(self):
        return [random.choice(self.worldwide_shocking_event_dict) for e in range(3)]


class Adventure:
    goals_list = ['Чудовищные обитатели подземелья терроризируют окрестности. Нужно остановить их!',
                  'Сорвать злодею все планы.', 'Уничтожить магическую угрозу внутри подземелья.',
                  'Найти сокровище.', 'Найти конкретный предмет, необходимый для определённой задачи.',
                  'Найти украденный предмет, спрятанный в подземелье.',
                  'Найти информацию, необходимую для определённой задачи.', 'Спасти пленника.',
                  'Выяснить, что случилось с предыдущей группой искателей приключений.',
                  'Найти исчезнувшего ПМ.', 'Убить дракона или другое опасное чудовище.',
                  'Исследуйте природу и происхождение странного места или явления.',
                  'Прогнать врагов, устроивших убежище в подземелье.', 'Сбегите из подземного плена.',
                  'Очистите руины от врагов, чтобы их можно было восстановить и вновь там обосноваться.'
                  'Узнайте, почему именно злодей так заинтересован в этом подземелье.',
                  'Выиграйте пари или завершите обряд посвящения, выживая в подземелье в течение определённого'
                  ' количества времени.', 'Устройте переговоры со злодеем в подземелье.',
                  'Скрывайтесь от опасности, угрожающей вне подземелья.',
                  'Оцените масштабы естественной или противоесте - ственной катастрофы.',
                  'Сопроводите ПМ в пункт назначения.', 'Добудьте информацию у отшельника - затворника.',
                  'Доберитесь до пункта назначения, оставшись незамеченными для сил злодея.',
                  'Остановите набеги чудовищ на караваны и фермерские хозяйства.',
                  'Установите торговые связи с далёким городом.', 'Защитите караван, идущий в далёкий город.',
                  'Нанесите на карту новые земли.', 'Найдите место для создания колонии.', 'Найдите природный ресурс.',
                  'Начните охоту на конкретное чудовище.', 'Вернитесь домой из далёкого места.',
                  'Найдите предмет, который был потерян в диких местах.', 'Защитите дикое место от нападающих.',
                  'Узнайте, что случилось с пропавшей группой исследователей.', 'Догоните убегающих противников.',
                  'Оцените размер приближающейся армии.', 'Не дайте тирану взойти на трон.',
                  'Захватите контроль над укреплённым объектом, таким как крепость, город, или корабль.',
                  'Защитите место от нападающих.', 'Заполучите предмет из надёжного места в поселении.',
                  'Заполучите предмет из каравана.', 'Достаньте предмет или товар из затерянного судна или каравана.',
                  'Вытащите заключённого из тюрьмы или тюрем - ного лагеря.', 'Сбегите из тюрьмы или тюремного лагеря.',
                  'Пройдите через полосу препятствий, чтобы получить признание или награду.',
                  'Проникните в укреплённое место.', 'Помешайте работе бизнеса или предприятия.',
                  'Найдите причину странных происшествий в доме с привидениями или в другом месте.',
                  'Спасите персонажа, чудовище, или предмет от естественной или неестественной катастрофы.'
                  ]
    villains_list = ['Зверь или монстр без особых целей или планов', 'Аберрация, желающая разврата или господства',
                     'Исчадие, желающее разврата или уничтожения', 'Дракон, желающий господства и грабежа',
                     'Великан, желающий грабежа', 'Нежить с любыми целями', 'Фея с загадочной целью',
                     'Гуманоид культист', 'Гуманоид завоеватель', 'Гуманоид мститель', 'Гуманоид под проклятьем',
                     'Гуманоид заговорщик, жаждущий власти', 'Гуманоид криминальный авторитет',
                     'Гуманоид налётчик или разрушитель', 'Дезинформированный гуманоид фанатик']
    associates_list = ['Опытный искатель приключений', 'Неопытный искатель приключений',
                       'Восторженный простолюдин', 'Солдат', 'Священник', 'Мудрец', 'Буйный сумасшедший', 'Небожитель',
                       'Фея', 'Маскирующееся чудовище', 'Злодей, выдающий себя за союзника', 'Мститель']
    patrons_list = ['Ушедший в отставку искатель приключений', 'Местный правитель', 'Военный офицер', 'Храмовник',
                    'Мудрец', 'Уважаемый старец', 'Божество', 'Небожитель'
                    ]
    intros_list = [
        'Во время путешествия по дикой местности герои проваливаются под землю, оказываясь в месте приключения.',
        'Во время путешествия по дикой местности герои замечают вход в место приключения.',
        'Во время путешествия по дороге на героев нападают чудовища, которые позже отступают в место приключения.',
        'Искатели приключений находят карту на мёртвом теле. В этой карте содержатся важные сведения, и злодей желает '
        'заполучить её.',
        'Таинственный волшебный предмет или злодей телепортирует персонажей в место приключения.',
        'Незнакомец встречает персонажей в таверне, и настоятельно призывает их отправиться в место приключения.',
        'В городе или деревне необходимы добровольцы, чтобы пойти в место приключения.',
        'Важный для персонажей ПМ просит их пойти в место приключения.',
        'ПМ, которому персонажи должны подчиняться, приказывает им идти к месту приключения.',
        'ПМ, которого персонажи уважают, просит их сходить на место приключения.',
        'Однажды ночью все персонажи видят сон, в котором они входят в место приключения.',
        'Деревню терроризирует призрак.Исследования показывают, что его можно отправить на покой только если войти в '
        'место приключения.']
    ending_list = ['Искатели приключений сталкиваются с главным злодеем и его приспешниками в финальной кровавой битве.',
                   'Искатели приключений преследуют злодея, обходя все ловушки, которые он для них приготовил, и,'
                   ' в конце концов, сталкиваются с ним в финальной битве в его убежище или за его пределами.',
                   'Действия главных героев вызывают катастрофу, в которой искатели приключений должны выжить.',
                   'Действия злодея вызывают катастрофу, в которой искатели приключений должны выжить.',
                   'Искатели приключений мчатся к месту, где злодей приводит в исполнение свой главный план, и '
                   'прибывают туда точно в последний момент.',
                   'лодей и два или три помощника проводят отдельные обряды в большой комнате. Искатели приключений'
                   ' должны помешать им всем одновременно.',
                   'Союзник предаёт искателей приключений как раз тогда, когда они уже вот-вот достигнут своей цели '
                   '(используйте этот вариант осторожно, и не злоупотребляйте им).',
                   'Портал, ведущий на другой план, начинает открываться. Из него выходят различные существа,'
                   'вынуждая искателей приключений закрывать портал и разбираться со злодеем одновременно.',
                   'Ловушки, опасности и оживлённые предметы выматывают искателей приключений, и тут же нападает '
                   'главный злодей.',
                   'Подземелье начинает разрушаться, а искатели приключений сталкиваются с главным злодеем, '
                   'который пытается скрыться, воспользовавшись образованным хаосом.',
                   'Появляется угроза, которая гораздо сильнее искателей приключений, которая уничтожает главного '
                   'злодея и переключает своё внимание на героев.',
                   'Искателям приключений нужно выбрать: погнаться за убегающим главным злодеем или '
                   'спасать друга или группу невиновных.',
                   'Искателям приключений необходимо обнаружить секретную слабость главного злодея, иначе нет '
                   'надежды на победу над ним.']

    def goal(self):
        return random.choice(self.goals_list)

    def villain(self):
        return random.choice(self.villains_list)

    def associate(self):
        return random.choice(self.associates_list)

    def patron(self):
        return random.choice(self.patrons_list)

    def intro(self):
        return random.choice(self.intros_list)

    def ending(self):
        return random.choice(self.ending_list)
